from math import sqrt
from Crypto.Util.number import long_to_bytes

N = 80958280137410344469270793621735550547403923964041971008952114628165974409360380289792220885326992426579868790128162893145613324338067958789899179419581085862309223717281585829617191377490590947730109453817502130283318153315193437990052156404947863059961976057429879645314342452813233368655425822274689461707
E = 3575901247532182907389411227211529824636724376722157756567776602226084740339294992167070515627141715229879280406393029563498781044157896403506408797685517148091205601955885898295742740813509895317351882951244059944509598074900130252149053360447229439583686319853300112906033979011695531155686173063061146739
c = 80629080505342932586166479028264765764709326746119909040860609021743893395577080637958779561184335633322859567681317501709922573784403504695809067898870536224427948000498261469984511352960143456934810825186736399371084350678586129000118485271831798923746976704036847707653422361120164687989605124465224952493

def contfrac_to_rational (frac):
    if len(frac) == 0:
        return (0,1)
    num = frac[-1]
    denom = 1
    for _ in range(-2,-len(frac)-1,-1):
        num, denom = frac[_]*num+denom, num
    return (num,denom)

n = N
e = E

a = e//n
frac = [a]
while a * n != e:
    e,n = n,e-a*n
    a = e//n
    frac.append(a)
convergents = []
for i in range(len(frac)):
    convergents.append(contfrac_to_rational(frac[0:i]))

for (k,d) in convergents:
    if k!=0 and (E*d-1)%k == 0:
        phi = (E*d-1)//k
        s = N - phi + 1
        discr = s*s - 4*N
        if(discr>=0):
            t = -1
            if discr.is_square():
                t = sqrt(discr)
            if t!=-1 and (s+t)%2==0:
                break
print(long_to_bytes(int(pow(c,d,N))))